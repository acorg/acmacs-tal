# Time-stamp: <2019-10-15 12:19:46 eu>

* Command line defines

-D whocc --> match seqdb

-D report-cumulative-output=-  write cumulative report to stdout
-D report-cumulative-output=filename  write cumulative report to filename

-D ladderize-method=max-edge-length  (number-of-leaves is default)

* Settings features

{"N": "if", "condition": {"and": ["{whocc}", {"not": "tree-has-sequences"}, {"or": ["{xxx}", {"not": "{yyy}"}]}]}, "then": [{"N": ...}], "else": [{"N": ...}]}

* Node modifications

** hide if cumulative edge length bigger than
{"N": "nodes", "select": {"cumulative >=": 0.01, "report": true}, "apply": "hide"} -- see [[Select Nodes][Select Nodes]]

** hide isolated before
{"N": "nodes", "select": {"date": ["", "2017"], "report": true}, "apply": "hide"} -- see [[Select Nodes][Select Nodes]]

** hide by regexp
{"N": "nodes", "select": {"seq_id": "/SWINE/", "report": true}, "apply": "hide"} -- see [[Select Nodes][Select Nodes]]

** just report selected
{"N": "nodes", "select": {}, "apply": "report"} -- see [[Select Nodes][Select Nodes]]

* Settings

{"N": "if", "condition": {"and": ["{whocc}", {"not": "tree-has-sequences"}]}, "then": [{"N": "seqdb", "filename": "{seqdb-filename}"}]}
{"N": "seqdb", "filename": "{seqdb-filename}"}

- {"N": "clade", "subtype": "A(H3N2)"} detect clade (only if aa_sequence present) based on given criteria

{"N": "ladderize", "method": "number-of-leaves", "?method": "max-edge-length"}
{"N": "re-root", "new-root": <seq-id>}

{"N": "node", "select": <select>, "apply": <node-apply>}

{"N": "report-cumulative", "output": "{report-cumulative-output}", "all": false}

* Select Nodes

If multiple criteria specified within single "select" object, they all used (conjunction)

{"all": true}
{"aa": ["192Q", "!123E"]}
{"cumulative >=": 0.01, "report": true}
{"date": ["start >=", "end <", "report": true}
{"seq_id": "regexp", "report": true}

* COMMENT ====== local vars
:PROPERTIES:
:VISIBILITY: folded
:END:
#+STARTUP: showall indent
Local Variables:
eval: (auto-fill-mode 0)
eval: (add-hook 'before-save-hook 'time-stamp)
eval: (set (make-local-variable org-confirm-elisp-link-function) nil)
End:
